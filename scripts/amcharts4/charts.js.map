{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/types/PercentChart.ts","webpack:///../../../../../src/.internal/charts/elements/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts"],"names":["__webpack_require__","d","__webpack_exports__","XYChartDataItem","XYChart","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","__WEBPACK_IMPORTED_MODULE_2__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_10__core_elements_ZoomOutButton__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_12__core_Registry__","__WEBPACK_IMPORTED_MODULE_13__elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Utils__","_super","_this","call","this","className","applyTheme","_axisRendererX","_axisRendererY","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","Object","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","exportable","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","series","iterator","invalidate","validateData","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processYAxis","handleYAxisRangeChange","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","start","end","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","inited","invalidateDataItems","defineProperty","_xAxes","handleAxisRemoval","oldValue","autoDispose","dispose","_yAxes","handleSeriesAdded","xAxis","yAxis","undefined","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","visible","isHiding","xPosition","yPosition","showSeriesTooltip","x","y","exceptAxis","snapToSeries","baseAxis","showAxisTooltip","hideObjectTooltip","updateLegendValue","sprites","sprite","hideTooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","sum","each","tooltip","setBounds","point","showTooltipAtPosition","sort","a","b","averageY","length","maxY","svgContainer","SVGContainer","top_1","bottom","dropped","nextHeight","i","pointY","invalid","validate","label","pixelY","pixelMarginTop","nextY","len","measuredHeight","pixelMarginBottom","except","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","htmlContainer","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","locationY","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","type","Error","axisRanges","index","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","disposeData","scrollbarChart","addData","rawDataItem","removeCount","registeredClasses","CategoryAxisDataItem","CategoryAxis","__WEBPACK_IMPORTED_MODULE_1__Axis__","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Adapter__","text","locations","category","endCategory","isEnabled","apply","properties","setProperty","dataItemsByCategory","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","validateDataRange","_series","invalidateDataRange","axisBreaks","dataCount","startIndex","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","frequency_1","breakSize","itemIndex_1","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","disabled","updateTickElement","grid","updateGridElement","updateLabelElement","currentText","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","startLocation","endLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","AxisLabelCircular","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Utils__","fdx","fdy","radius","isMeasured","setPercentProperty","pixelRadius","axisRadius","sign","inside","fixPoint","atan2","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","XYSeriesDataItem","XYSeries","__WEBPACK_IMPORTED_MODULE_1__Series__","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_15__core_rendering_Path__","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","field","getWorkingValue","getValue","getMax","_xAxis","_yAxis","_xValueFields","_yValueFields","mainContainer","setElement","paper","stacked","snapTooltip","pointerOrientation","returnBulletDefaultState","_tmin","clear","_tmax","_smin","_smax","seriesDataChangeUpdate","defineFields","data","updateItemReaderText","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","dataItemsX","dataItemsByAxis","dataItemsY","xAxisFieldName","xField","xOpenField","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","fillPath","path","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","removeKey","set","registerSeries","invalidateData","_baseAxis","processValues","minX","Infinity","maxX","minY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","dispatchImmediately","_prevTooltipDataItem","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_a","bullets","_b","done","isHover","showTooltip","tooltipText","bullet","isDisposed","positionBullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","moveTo","bulletLocation","workingLocations","duration","anim","delay","interpolationDuration","defaultState","transitionDuration","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","minZoomed","maxZoomed","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","DateAxisDataItem","DateAxis","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","endDate","dates","getTime","endValue","gridIntervals","dateFormats","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","pushAll","gridInterval","_gridInterval","gridDuration","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","findClosestIndex","minDifference","MAX_VALUE","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","markUnitChange","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","location_1","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","time","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","tooltipDateFormat","dateFormat","findNearest","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","asIs","local","closestDate_1","actualTime_1","globalPosition","toGlobalPosition","XYCursor","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","_lineX","_lineY","interfaceColors","selection","getFor","interactionsEnabled","lineX","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","_positionPrecision","h","validatePosition","triggerMoveReal","isHidden","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","reset","_selection","element","_snapToDisposer","handleSnap","getPositions","animationDuration","easing","animationEasing","animate","property","to","LineSeriesDataItem","LineSeries","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","connect","tensionX","tensionY","segmentsContainer","previousDataItem","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","segment","tooltipColorSource","openSegment","_workingStartIndex","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","line","x2","copyToLegendMarker","hasLabels_1","children","child","clone","LineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","fillSprite","strokeSprite","smoothnessX","smoothnessY","smooth","lineElement","fillElement","PieSeriesDataItem","PieSeries","__WEBPACK_IMPORTED_MODULE_1__PercentSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__elements_PieTick__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","radiusValue","toValue","alignLabels","startAngle","endAngle","createSlice","createTick","createLabel","initSlice","slice","scale","handleSliceScale","handleSliceMove","states","shiftRadius","togglable","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","aAngle","middleAngle","bAngle","arrangeLabels","innerRadius","pixelInnerRadius","arc","normalizedMiddleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","_pixelRadius","_pixelInnerRadius","definedBBox","Candlestick","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","createAssets","lowLine","highLine","AxisRendererCircular","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","pixelRadiusReal","useChartAngles","pixelPerfect","tooltipLocation","setAxis","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","invalidateAxisItems","invalidateSeries","cornerRadius","createGrid","createFill","pointToPosition","coordinateToPosition","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","RadarChart","__WEBPACK_IMPORTED_MODULE_1__XYChart__","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","innerRadiusModifyer","radarContainer","opacity","beforeDraw","rect","innerRect","wr","hr","mr","maxRadius","diameter","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","startValue","Cursor","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","_stick","trackable","clickable","interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","_stickPoint","triggerMove","hideReal","stick","invalidatePosition","triggerDown","setGlobalStyle","grabbing","triggerUp","getHitOption","interactions","default","cancelable","preventDefault","lockElement","XYChartScrollbar","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","margin","_scrollbarChart","minHeight","minWidth","unselectedOverlay","_unselectedOverlay","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","title","rangeChangeDuration","id","axisFills","showOnInit","zoomOutAxes","updateByOrientation","off","handleDataChanged","updateThumb","RadarSeriesDataItem","RadarSeries","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","gridType","axisAngle","gridLocation","count_1","cellEndLocation","updateBaseGridElement","count_2","updateBreakElement","createBreakSprites","updateTooltip","tooltipOrientation","bigNum","axisFullLength","ClockHand","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","_axis","pin","startWidth","endWidth","hand","leftSide","rightSide","x0","x1","_pin","_hand","showValue","_value","newAngle","currentAngle","rotationDirection","updateValue","PieChartDataItem","PieChart","__WEBPACK_IMPORTED_MODULE_1__PercentChart__","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","updateRadius","validateLayout","updateSeriesAngles","chartCont","chartRadius","chartPixelInnerRadius","seriesRadius","PercentChartDataItem","PercentChart","__WEBPACK_IMPORTED_MODULE_2__series_PercentSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Iterator__","feedLegend","legend","legendData_1","hiddenInLegend","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","setLegend","itemContainers","PercentSeriesDataItem","PieTick","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","_label","_slice","y0","y1","y2","r","attr","PieSeries3DDataItem","PieSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depthValue","depth","depthPercent","ChordNode","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","updateRotation","setStateOnChildren","invalidateLinks","total","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","ChordLink","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","middleLine","isTemplate","fromX","fromY","toX","toY","cp","bulletsMask","mAngle1","mAngle2","cpx","cpy","positionBullets","TreeMapSeriesDataItem","TreeMapSeries","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","treeMapDataItem","_dataContext","columns","configField","seriesDataItem","showReal","removeChildren","column","AxisRendererX3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","getWidth","ColumnSeries3DDataItem","ColumnSeries3D","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","columnsContainer","_columnsContainer","validateDataElementReal","createColumnTemplate","CandlestickSeriesDataItem","CandlestickSeries","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","lowValueX","lowValueY","highValueX","highValueY","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","openLine","highLowLine","closeLine","RadarColumn","radarColumn","getTooltipX","getTooltipY","PyramidSeriesDataItem","PyramidSeries","__WEBPACK_IMPORTED_MODULE_1__FunnelSeries__","__WEBPACK_IMPORTED_MODULE_3__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Utils__","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","_nextWidth","getNextValue","nextValue","slicesContainer","relValue","sliceLink","_pyramidHeight","_pyramidWidth","labelsContainer","ticksContainer","decorateSlice","pyramidWidth","linkWidth","linkHeight","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","s","sqrt","_nextY","sliceWidth","ConeColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","coneColumn","CurvedColumn","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Smoothing__","curvedColumn","realWidth","realHeight","realX","realY","tension","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__internal_charts_types_GaugeChart__","__WEBPACK_IMPORTED_MODULE_1__internal_charts_types_RadarChart__","__WEBPACK_IMPORTED_MODULE_2__internal_charts_types_XYChart__","__WEBPACK_IMPORTED_MODULE_3__internal_charts_types_SerialChart__","__WEBPACK_IMPORTED_MODULE_4__internal_charts_types_PieChart3D__","__WEBPACK_IMPORTED_MODULE_5__internal_charts_types_PieChart__","__WEBPACK_IMPORTED_MODULE_6__internal_charts_types_SlicedChart__","__WEBPACK_IMPORTED_MODULE_7__internal_charts_types_FlowDiagram__","__WEBPACK_IMPORTED_MODULE_8__internal_charts_types_SankeyDiagram__","__WEBPACK_IMPORTED_MODULE_9__internal_charts_types_ChordDiagram__","__WEBPACK_IMPORTED_MODULE_10__internal_charts_types_TreeMap__","__WEBPACK_IMPORTED_MODULE_11__internal_charts_types_XYChart3D__","__WEBPACK_IMPORTED_MODULE_12__internal_charts_Chart__","__WEBPACK_IMPORTED_MODULE_13__internal_charts_Legend__","__WEBPACK_IMPORTED_MODULE_14__internal_charts_elements_HeatLegend__","__WEBPACK_IMPORTED_MODULE_15__internal_charts_series_Series__","__WEBPACK_IMPORTED_MODULE_16__internal_charts_series_XYSeries__","__WEBPACK_IMPORTED_MODULE_17__internal_charts_series_LineSeries__","__WEBPACK_IMPORTED_MODULE_18__internal_charts_series_LineSeriesSegment__","__WEBPACK_IMPORTED_MODULE_19__internal_charts_series_CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_20__internal_charts_series_OHLCSeries__","__WEBPACK_IMPORTED_MODULE_21__internal_charts_series_ColumnSeries__","__WEBPACK_IMPORTED_MODULE_22__internal_charts_series_StepLineSeries__","__WEBPACK_IMPORTED_MODULE_23__internal_charts_series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_24__internal_charts_series_RadarColumnSeries__","__WEBPACK_IMPORTED_MODULE_25__internal_charts_series_PieSeries__","__WEBPACK_IMPORTED_MODULE_26__internal_charts_series_FunnelSeries__","__WEBPACK_IMPORTED_MODULE_27__internal_charts_series_PyramidSeries__","__WEBPACK_IMPORTED_MODULE_28__internal_charts_series_PictorialStackedSeries__","__WEBPACK_IMPORTED_MODULE_29__internal_charts_elements_PieTick__","__WEBPACK_IMPORTED_MODULE_30__internal_charts_elements_FunnelSlice__","__WEBPACK_IMPORTED_MODULE_31__internal_charts_series_PieSeries3D__","__WEBPACK_IMPORTED_MODULE_32__internal_charts_series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_33__internal_charts_series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_34__internal_charts_series_ConeSeries__","__WEBPACK_IMPORTED_MODULE_35__internal_charts_series_CurvedColumnSeries__","__WEBPACK_IMPORTED_MODULE_36__internal_charts_axes_Axis__","__WEBPACK_IMPORTED_MODULE_37__internal_charts_axes_Grid__","__WEBPACK_IMPORTED_MODULE_38__internal_charts_axes_AxisTick__","__WEBPACK_IMPORTED_MODULE_39__internal_charts_axes_AxisLabel__","__WEBPACK_IMPORTED_MODULE_40__internal_charts_axes_AxisLine__","__WEBPACK_IMPORTED_MODULE_41__internal_charts_axes_AxisFill__","__WEBPACK_IMPORTED_MODULE_42__internal_charts_axes_AxisRenderer__","__WEBPACK_IMPORTED_MODULE_43__internal_charts_axes_AxisBreak__","__WEBPACK_IMPORTED_MODULE_44__internal_charts_axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_45__internal_charts_axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_46__internal_charts_axes_CategoryAxisBreak__","__WEBPACK_IMPORTED_MODULE_47__internal_charts_axes_DateAxis__","__WEBPACK_IMPORTED_MODULE_48__internal_charts_axes_DurationAxis__","__WEBPACK_IMPORTED_MODULE_49__internal_charts_axes_DateAxisBreak__","__WEBPACK_IMPORTED_MODULE_50__internal_charts_axes_ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_51__internal_charts_axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_52__internal_charts_axes_AxisRendererY__","__WEBPACK_IMPORTED_MODULE_53__internal_charts_axes_AxisRendererRadial__","__WEBPACK_IMPORTED_MODULE_54__internal_charts_axes_AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_55__internal_charts_axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_56__internal_charts_axes_AxisFillCircular__","__WEBPACK_IMPORTED_MODULE_57__internal_charts_axes_GridCircular__","__WEBPACK_IMPORTED_MODULE_58__internal_charts_axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_59__internal_charts_axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_60__internal_charts_elements_Tick__","__WEBPACK_IMPORTED_MODULE_61__internal_charts_elements_Bullet__","__WEBPACK_IMPORTED_MODULE_62__internal_charts_elements_LabelBullet__","__WEBPACK_IMPORTED_MODULE_63__internal_charts_elements_CircleBullet__","__WEBPACK_IMPORTED_MODULE_64__internal_charts_elements_ErrorBullet__","__WEBPACK_IMPORTED_MODULE_65__internal_charts_elements_XYChartScrollbar__","__WEBPACK_IMPORTED_MODULE_66__internal_charts_elements_ClockHand__","__WEBPACK_IMPORTED_MODULE_67__internal_charts_elements_FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_68__internal_charts_elements_FlowDiagramLink__","__WEBPACK_IMPORTED_MODULE_69__internal_charts_elements_SankeyNode__","__WEBPACK_IMPORTED_MODULE_70__internal_charts_elements_SankeyLink__","__WEBPACK_IMPORTED_MODULE_71__internal_charts_elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_72__internal_charts_elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_73__internal_charts_elements_NavigationBar__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_elements_Column__","__WEBPACK_IMPORTED_MODULE_75__internal_charts_elements_Candlestick__","__WEBPACK_IMPORTED_MODULE_76__internal_charts_elements_OHLC__","__WEBPACK_IMPORTED_MODULE_77__internal_charts_elements_RadarColumn__","__WEBPACK_IMPORTED_MODULE_78__internal_charts_elements_Column3D__","__WEBPACK_IMPORTED_MODULE_79__internal_charts_elements_ConeColumn__","__WEBPACK_IMPORTED_MODULE_80__internal_charts_elements_CurvedColumn__","__WEBPACK_IMPORTED_MODULE_81__internal_charts_cursors_XYCursor__","__WEBPACK_IMPORTED_MODULE_82__internal_charts_cursors_Cursor__","__WEBPACK_IMPORTED_MODULE_83__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","GaugeChart","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","hands","processHand","PieChart3DDataItem","PieChart3D","__WEBPACK_IMPORTED_MODULE_1__PieChart__","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","invalidateDataUsers","SlicedChartDataItem","SlicedChart","ChordDiagramDataItem","ChordDiagram","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","nodePadding","chordContainer","nodesContainer","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","createLink","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","p1","p2","point1","point2","TreeMapDataItem","TreeMap","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","rows","hasChildren","level","color","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","cursorOverStyle","zoomToSeriesDataItem","toggleBullets","currentlyZoomed","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","i0","i1","row","handleDataItemValueChange","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__core_Sprite__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY3D__","__WEBPACK_IMPORTED_MODULE_6__series_ColumnSeries3D__","__WEBPACK_IMPORTED_MODULE_7__core_Registry__","fixLayout","fixColumns","clustered","depthIndex","i_1","maskColumns","OHLCSeriesDataItem","OHLCSeries","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesDataItem","StepLineSeries","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","noRisers","prevPoint","point0","vertical","StepLineSeriesSegment","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","addSprite","setColumnStates","disableUnusedColumns","PictorialStackedSeriesDataItem","PictorialStackedSeries","__WEBPACK_IMPORTED_MODULE_1__PyramidSeries__","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","hs","expandDistance","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CurvedColumnSeriesDataItem","CurvedColumnSeries","__WEBPACK_IMPORTED_MODULE_2__elements_CurvedColumn__","DurationAxisDataItem","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet","__WEBPACK_IMPORTED_MODULE_1__Bullet__","circle","ErrorBullet","errorLine","isDynamic","NavigationBarDataItem","NavigationBar","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","textLink","paddingTop","paddingBottom","_linksIterator","triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","ColumnSeriesDataItem","ColumnSeries","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","__WEBPACK_IMPORTED_MODULE_17__core_utils_Disposer__","_column","setColumn","_rangesColumns","_startLocation","_endLocation","simplifiedProcessing","baseAxisSeries","clusterCount","cellStartLocation","l","t","percentHeight","outOfBounds","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","ev","populateString","virtualParent","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","legendDataItem","fromOpenState_1","fromPreviousState_1"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"startchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"startchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\taxis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis:Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif(snapToSeries){\r\n\t\t\t\tif(snapToSeries.baseAxis == snapToSeries.xAxis){\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif(snapToSeries.baseAxis == snapToSeries.yAxis){\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tlet sum = 0;\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topPoint = $utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?:Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif(axis != except){\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\t\t\t\t\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, locationX);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, locationX);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, locationY);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, locationY);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param {Object | Object[]} rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t *\r\n\t * @type {Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>}\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties[\"category\"]);\r\n\t\t}\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\t\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif (dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\r\n\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif($type.hasValue(category)){\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdx: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {number}\r\n\t * @ignore\r\n\t */\r\n\tpublic fdy: number = 0;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels or percent.\r\n\t *\r\n\t * @param {number} value Distance (px or percent)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * returns label radius in pixels\r\n\t */\r\n\tpublic pixelRadius(axisRadius: number): number {\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\tlet labelRadius = this.pixelRadius(axisRadius);\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.fdx = this.dx;\r\n\t\tthis.fdy = this.dy;\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the current cursor position\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tminY = $math.min(minY, stackY);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tminX = $math.min(minX, stackX);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tif (this.stackedSeries) {\r\n\t\t\t\t\tthis.stackedSeries.processValues(false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem && dataItem.visible) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.isHover = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tif (!bullet.isDisposed()) {\r\n\t\t\t\t\tbullet.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?:string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * @type {number}\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @todo type\r\n\t */\r\n\tpublic fillRule(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tvar minDifference = Number.MAX_VALUE;\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count);\r\n\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tif (this._gridInterval.count > 1) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / this._gridInterval.count;\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count).getTime() + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count).getTime() + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\t//baseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param  {XYSeries}          series       Series\r\n\t * @param  {number}            position     Position (px)\r\n\t * @param  {boolean}           findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return {XYSeriesDataItem}               Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\r\n\t\t\twhile (leftDate.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t\tif (leftCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (rightDate.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t\tif (rightCount > 5000) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param {number} position Position (0-1)\r\n\t * @param {boolean} local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\t\tif (this.snapTooltip) {\r\n\t\t\tlet actualDate = $time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1);\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration / 2);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\r\n\t\tlet globalPosition = this.toGlobalPosition(position);\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tseries.showTooltipAtPosition(globalPosition, undefined);\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tseries.showTooltipAtPosition(undefined, globalPosition);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries, IXYSeriesEvents } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t *\r\n\t * @type {XYSeries}\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t * \r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t * \r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX - this.pixelWidth;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: x }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\t \r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(this._workingStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif(this.setPropertyValue(\"connect\", value)){\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\r\n\t /*\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tif (dataItem.segment) {\r\n\t\t\t$object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n\t\t}\r\n\t}*/\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tpublic _tick: PieTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends IPercentSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends IPercentSeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends PercentSeries {\r\n\r\n\tpublic _slice: Slice;\r\n\r\n\tpublic _tick: PieTick;\r\n\r\n\tpublic _label: AxisLabelCircular;\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * [_pixelRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelRadius: number;\r\n\r\n\t/**\r\n\t * [_pixelInnerRadius description]\r\n\t *\r\n\t * @ignore this is set by pie chart, not by user\r\n\t * @type {number}\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.labels.template.radius = percent(5);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice();\r\n\t}\r\n\r\n\t/** \r\n\t * creates tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new PieTick();\r\n\t}\r\n\r\n\t/** \r\n\t * creates label\r\n\t */\r\n\tprotected createLabel(): this[\"_label\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits slice.\r\n\t *\r\n\t * @param  {Slice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis._rightItems.sort((a, b) => {\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle > 270) {\r\n\t\t\t\t\taAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bAngle > 270) {\r\n\t\t\t\t\tbAngle -= 360;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis._leftItems.sort((a, b) => {\r\n\r\n\t\t\t\tlet aAngle = (a.slice.middleAngle + 360) % 360;\r\n\t\t\t\tlet bAngle = (b.slice.middleAngle + 360) % 360;\r\n\r\n\t\t\t\tif (aAngle < bAngle) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.pixelRadius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.radius = this.pixelRadius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\t\t\tif (!(slice.innerRadius instanceof Percent)) {\r\n\t\t\t\tslice.innerRadius = this.pixelInnerRadius;\r\n\t\t\t}\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet labelRadius = label.pixelRadius(slice.radius);\r\n\t\t\t\tlet x: number = tick.length + labelRadius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 90) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.pixelRadius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = slice.radius + tick.length + labelRadius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels or [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn this._pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelRadius(value: number) {\r\n\t\tif (this._pixelRadius != value) {\r\n\t\t\tthis._pixelRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Pixel inner radius\r\n\t * @ignore\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set pixelInnerRadius(value: number) {\r\n\t\tif (this._pixelInnerRadius != value) {\r\n\t\t\tthis._pixelInnerRadius = value;\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number | Percent} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<this[\"_slice\"], ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\r\n\t\t\tlet slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet label = dataItem.label;\r\n\t\t\t\tif (label) {\r\n\t\t\t\t\tlabel.dx = label.fdx + slice.dx + slice.pixelX;\r\n\t\t\t\t\tlabel.dy = label.fdy + slice.dy + slice.pixelY;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRectangle}\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n\t\t}\r\n\r\n\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param {Candlestick} source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param  {IPoint}  point  Point\r\n\t * @return {number}         Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {RadarSeries | RadarColumnSeries}\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param  {number}  duration  Fade out duration (ms)\r\n\t * @return {Animation}            Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param {IPoint}                    point  Point to place cursor at\r\n\t * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}  point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\t\t\t\t\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\t\t\t\t\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\t\t\t\t\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\t\t\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param  {IPoint}  point  Point\r\n\t * @return {number}         Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends IPercentChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends IPercentChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\t\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.updateRadius, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(): void {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[Series]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<PieSeries>[\"inserted\"]): void {\r\n\t\tsuper.handleSeriesAdded(event);\r\n\t\tthis.updateSeriesAngles();\r\n\t}\t\r\n\r\n\tprotected updateSeriesAngles(){\r\n\t\tthis.series.each((series)=>{\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t\tseries.defaultState.properties.startAngle = this.startAngle;\r\n\t\t\tseries.defaultState.properties.endAngle = this.endAngle;\t\t\t\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\r\n\t\t\tlet radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n\t\t\tlet innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n\r\n\t\t\tif(!$type.isNumber(radius)){\r\n\t\t\t\tradius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\t}\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n\t\t\t}\r\n\r\n\t\t\tseries.pixelRadius = radius;\r\n\t\t\tseries.pixelInnerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tthis.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n\t\tthis.seriesContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif(this.setPercentProperty(\"radius\", value, true, false, 10, false)){\r\n\t\t\tthis.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"startAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t * \r\n\t * NOTE: This setting is not supported in a 3D pie chart.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tif(this.setPropertyValue(\"endAngle\", value)){\r\n\t\t\tthis.updateRadius();\r\n\t\t\tthis.updateSeriesAngles()\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PercentChart}\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IPercentChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPercentChartProperties}\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPercentChartEvents}\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PercentSeries}\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return {PercentSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tPercentSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet PercentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tPercentSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PercentChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"../series/PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvar r = label.pixelRadius(slice.radius);\r\n\r\n\t\t\t\tx1 = x0 + r * slice.ix;\r\n\t\t\t\ty1 = y0 + r * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\t\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/** \r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\t\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t})\r\n\r\n\t\tlet animation = super.showReal(interpolationDuration);\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\t\t\r\n\t\tif($type.isNumber(duration)){\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem)=>{\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t})\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tif(chart){\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tchart.invalidateLayout();\t\t\t\t\t\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchart.invalidateLayout();\t\t\t\t\r\n\t\t\t}\r\n\t\t\tchart.invalidateLayout();\r\n\t\t}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate(){\r\n\r\n\t}\t\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\t\r\n\t\t}\t\t\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param {OHLC} source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param {RadarColumn} source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PyramidSeries}\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @type {\"height\" | \"area\"}\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPyramidSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPyramidSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPyramidSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPyramidSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PyramidSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PyramidSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param  {FunnelSeriesDataItem} dataItem [description]\r\n\t * @return {number}                        [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t * \r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]} dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif(sum == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\t\t\t\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\t\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t * \r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t * @type {Cone}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param {ConeColumn} source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @type {Orientation}\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\tlet ww = this.width;\r\n\t\tlet pw = 0.8;\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t * \r\n\t * @param {CurvedColumn}  source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param {number}  value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param {Orientation}  value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {Orientation} Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 324\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { SlicedChart, SlicedChartDataItem, ISlicedChartAdapters, ISlicedChartDataFields, ISlicedChartEvents, ISlicedChartProperties } from \"./.internal/charts/types/SlicedChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { FunnelSeries, FunnelSeriesDataItem, IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties } from \"./.internal/charts/series/FunnelSeries\";\nexport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\nexport { IPictorialStackedSeriesAdapters, IPictorialStackedSeriesDataFields, IPictorialStackedSeriesEvents, IPictorialStackedSeriesProperties, PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/elements/PieTick\";\nexport { FunnelSlice, IFunnelSliceAdapters, IFunnelSliceEvents, IFunnelSliceProperties } from \"./.internal/charts/elements/FunnelSlice\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem, ICurvedColumnSeriesAdapters, ICurvedColumnSeriesDataFields, ICurvedColumnSeriesProperties, ICurvedColumnSeriesEvents } from \"./.internal/charts/series/CurvedColumnSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { DurationAxisDataItem, DurationAxis, IDurationAxisAdapters, IDurationAxisDataFields, IDurationAxisEvents, IDurationAxisProperties } from \"./.internal/charts/axes/DurationAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { ErrorBullet, IErrorBulletAdapters, IErrorBulletEvents, IErrorBulletProperties } from \"./.internal/charts/elements/ErrorBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\nexport { CurvedColumn, ICurvedColumnAdapters, ICurvedColumnEvents, ICurvedColumnProperties } from \"./.internal/charts/elements/CurvedColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"../series/FunnelSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {SlicedChart}\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ISlicedChartDataFields}\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ISlicedChartProperties}\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ISlicedChartEvents}\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {FunnelSeries}\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); \r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to `1` to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?:string): void {\r\n\t\tif(name == \"value\"){\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?:string): void {\r\n\t\tif(name == \"value\"){\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (series.level == 1) {\r\n\t\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count );\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers && this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif(radius == 0){\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { Color, color } from \"../../core/utils/Color\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PictorialStackedSeries}\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\tpicture?: Sprite;\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPictorialStackedSeriesEvents}\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {PictorialStackedSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t * \r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif(scale == Infinity){\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight;\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth;\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\r\n\t\tsuper.validateDataElements();\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PictorialStackedSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return {Sprite} Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param  {FunnelSlice} slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * CurvedColumnSeries module.\r\n * \r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {CurvedColumnSeries}\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Dfines type of the column.\r\n\t * \r\n\t * @type {CurvedColumn}\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t *\r\n\t * @type {CurvedColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICurvedColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t * \r\n\t * @ignore Exclude from docs\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {DurationAxis}\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {IDurationAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IDurationAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IDurationAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDurationAxisEvents}\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @type {DurationAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t * \r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}      min        [description]\r\n\t * @param  {number}      max        [description]\r\n\t * @param  {number}      difference [description]\r\n\t * @param  {number}      gridCount  [description]\r\n\t * @param  {boolean}     strictMode [description]\r\n\t * @return {IMinMaxStep}            [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\tlet unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param {string}  value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param {TimeUnit} timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {TimeUnit} Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param {this} source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IErrorBulletProperties}\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IErrorBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IErrorBulletEvents}\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t *\r\n\t * @type {NavigationBarDataItem}\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.index < this.startIndex || dataItem.index >= this.endIndex) {\r\n\t\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?:string): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts"],"sourceRoot":""}